(in-package #:noloop.cacau)

(defun create-no-spaghetti-interface (runner)
  (let ((suites (make-hash-table))
        (current-parent (suite-root runner)))
    (setf (gethash :suite-root suites) (suite-root runner))
    (defun before-all (&rest args)
      (create-before-all current-parent args))
    (defun after-all (&rest args)
      (create-after-all current-parent args))
    (defun before-each (&rest args)
      (create-before-each current-parent args))
    (defun after-each (&rest args)
      (create-after-each current-parent args))
    (defun in-suite (name &key (parent :suite-root) (only nil) (skip nil))
      (let ((suite (create-suite runner name :only-p only :skip-p skip)))
        (setf (gethash name suites) suite)
        (setf current-parent (gethash parent suites))
        (add-child current-parent suite)
        (setf current-parent suite)
        suite))
    (defun deftest-fn (name fn &key (only-p nil) (skip-p nil))
      (let ((test (create-test runner name fn :only-p only-p :skip-p skip-p)))
        (add-child current-parent test)
        test))
    (defun deftest (name fn)
      (deftest-fn name fn))
    (defun deftest-only (name fn)
      (deftest-fn name fn :only-p t))
    (defun deftest-skip (name fn)
      (deftest-fn name fn :skip-p t))))

